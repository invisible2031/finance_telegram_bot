from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
import yfinance as yf
from moexalgo import Ticker
from datetime import date, time, datetime, timedelta
import matplotlib.dates as mdates
from io import BytesIO
import matplotlib.pyplot as plt
from dotenv import load_dotenv
import os
import locale

locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')

def plural_day_ru(n):
    n = abs(n) % 100
    n1 = n % 10

    if 11 <= n <= 19:
        return "–¥–Ω–µ–π"
    elif n1 == 1:
        return "–¥–µ–Ω—å"
    elif 2 <= n1 <= 4:
        return "–¥–Ω—è"
    else:
        return "–¥–Ω–µ–π"

def type_gap_to_ru(s):
    dict_type_to_rus = {
        '1min': '–º–∏–Ω—É—Ç–Ω—ã–π',
        '10min': '10-–º–∏–Ω—É—Ç–Ω—ã–π',
        '1h': '—á–∞—Å–æ–≤–æ–π',
        '1d': '–¥–Ω–µ–≤–Ω–æ–π',
        '1w': '–Ω–µ–¥–µ–ª—å–Ω—ã–π',
        '1m': '–º–µ—Å—è—á–Ω—ã–π',
    }
    return dict_type_to_rus[s]

def format_days_human(n_days):
    if n_days >= 365 * 2:
        years = n_days // 365
        return f"{years} {'–≥–æ–¥–∞' if 2 <= years <= 4 else '–ª–µ—Ç'}"
    elif n_days >= 60:
        months = n_days // 30
        return f"{months} {'–º–µ—Å—è—Ü–∞' if 2 <= months <= 4 else '–º–µ—Å—è—Ü–µ–≤'}"
    elif n_days >= 7:
        weeks = n_days // 7
        return f"{weeks} {'–Ω–µ–¥–µ–ª–∏' if 2 <= weeks <= 4 else '–Ω–µ–¥–µ–ª—å'}"
    else:
        return f"{n_days} {'–¥–µ–Ω—å' if n_days == 1 else '–¥–Ω—è' if 2 <= n_days <= 4 else '–¥–Ω–µ–π'}"

def paint_plot(df, ticker, start_date, end_date, date_type, date_delta):
    # –ø–ª–∞–≤–∞—é—â–∏–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    days = plural_day_ru(date_delta)
    gap_type = type_gap_to_ru(date_type)
    if date_delta >= 1:
        part_header_time_gap = f'{start_date.strftime('%d.%m.%y')} - {end_date.strftime('%d.%m.%y')}'
    else:
        part_header_time_gap = f'{start_date.strftime('%d.%m.%y')}'

    if date_delta <= 3:
        x_date_format = '%d.%m %H:%M'
    elif date_delta <= 90:
        x_date_format = '%d.%m.%y'
    else:
        x_date_format = '%b %Y'

    len_x = 15
    if len(df) >= 1000:
        linewidth = 1.3
        # len_x = 20
    elif len(df) >= 4000:
        linewidth = 0.9
    else:
        linewidth = 2


    plt.style.use('seaborn-v0_8-darkgrid')
    plt.rcParams['font.family'] = 'Times New Roman'

    fig, ax = plt.subplots(figsize=(len_x, 7))

    x = list(range(len(df)))
    y = df['open'].values

    # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
    ax.plot(x, y,
            linewidth=linewidth,
            color="#3d69b7",
            label='–¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è')

    # –ü–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    ax.set_title(f'{ticker} | {part_header_time_gap} | {format_days_human(date_delta)} ({len(df)} —Ç–æ—á–µ–∫) | –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {df.iloc[-1]["open"]:.1f}‚ÇΩ',
                 fontsize=20, pad=20, fontweight='bold')
    ax.set_xlabel('–î–∞—Ç–∞', fontsize=16)
    ax.set_ylabel('–¶–µ–Ω–∞ (‚ÇΩ)', fontsize=16)
    ax.legend(fontsize=12)
    ax.grid(True, alpha=0.4)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –¥–∞—Ç –Ω–∞ –æ—Å–∏ X —Å —à–∞–≥–æ–º
    step_x = max(len(df) // 10, 1)
    xticks = x[::step_x]
    xticklabels = df['begin'].dt.strftime(x_date_format)[::step_x]

    ax.set_xticks(xticks)
    ax.set_xticklabels(xticklabels, rotation=45)

    plt.tight_layout()

    buf = BytesIO()
    plt.savefig(buf, format='png', dpi=300, bbox_inches='tight')
    buf.seek(0)
    plt.close()

    return buf

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def handle_back(update, context):
    query = update.callback_query
    await query.answer()

    stack = context.user_data.get('history_steps', [])

    if stack:
        stack.pop()
        previous_step = stack[-1] if stack else 'start'
        
    target_func = globals().get(previous_step)
    await target_func(update, context)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
async def start(update, context):
    keyboard_menu = [
        [InlineKeyboardButton('üìù –í–≤–µ—Å—Ç–∏ —Ç–∏–∫–µ—Ä –≤—Ä—É—á–Ω—É—é', callback_data='manual_input')],
        [InlineKeyboardButton('üè¶ –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞', callback_data='company_list')]
    ]

    if hasattr(update, 'message') and update.message:
        message = update.message
        await message.reply_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:",
                                 reply_markup=InlineKeyboardMarkup(keyboard_menu)
                                 )
    else:
        query = update.callback_query
        await query.edit_message_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:",
                                 reply_markup=InlineKeyboardMarkup(keyboard_menu)
                                 )
    stack = context.user_data.setdefault('history_steps', [])
    if not stack or stack[-1] != 'start':
        stack.append('start')
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–∏–∫–µ—Ä–∞
async def manual_input(update, context):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: LKOH, TATN):',
                                  reply_markup=InlineKeyboardMarkup(
                                      [[InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='go_back')]]
                                  ))
    stack = context.user_data.setdefault('history_steps', [])
    if not stack or stack[-1] != 'manual_input':
        stack.append('manual_input')

# –ú–µ–Ω—é –∫–æ–º–ø–∞–Ω–∏–π (3 –∫–Ω–æ–ø–∫–∏)
async def company_list(update, context):
    query = update.callback_query
    await query.answer()

    companies = [
        ['–°–±–µ—Ä–±–∞–Ω–∫', 'SBER'],
        ['–ì–∞–∑–ø—Ä–æ–º', 'GAZP'],
        ['–ù–æ–≤–∞—Ç—ç–∫', 'NVTK']
    ]

    keyboard_select_companies = [[InlineKeyboardButton(name, callback_data=f'ticker_{ticker}')] for name, ticker in companies]
    keyboard_select_companies.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='go_back')])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    await query.edit_message_text(
        'üîç –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é:',
        reply_markup=InlineKeyboardMarkup(keyboard_select_companies)
    )
    stack = context.user_data.setdefault('history_steps', [])
    if not stack or stack[-1] != 'company_list':
        stack.append('company_list')

async def handle_ticker(update, context):
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        ticker = query.data.replace('ticker_', '')
        message = query.message
    else:
        ticker = update.message.text.strip().upper()
        message = update.message

    try:
        Ticker(ticker)
        context.user_data['ticker'] = ticker
        await period_menu(update, context)

    except Exception as e:
        await message.reply_text(f'‚ùå –û—à–∏–±–∫–∞: {str(e)}.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–∫–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')


async def period_menu(update, context):
    if hasattr(update, 'callback_query') and update.callback_query:
        query = update.callback_query
        await query.answer()
        edit_message = query.edit_message_text
    else:
        edit_message = update.message.reply_text

    keyboard_period = [
        [InlineKeyboardButton('üìÖ 1 –¥–µ–Ω—å', callback_data='period_1day')],
        [InlineKeyboardButton('üìÜ 1 –º–µ—Å—è—Ü', callback_data='period_1month')],
        [InlineKeyboardButton('üìÖ 1 –≥–æ–¥', callback_data='period_1year')],
        [InlineKeyboardButton('üìä 5 –ª–µ—Ç', callback_data='period_5years')]
    ]

    keyboard_period.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='go_back')])
    await edit_message(
        f"‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è {context.user_data.get('ticker', '')}:",
        reply_markup=InlineKeyboardMarkup(keyboard_period)
    )
    stack = context.user_data.setdefault('history_steps', [])
    if not stack or stack[-1] != 'period_menu':
        stack.append('period_menu')


async def handle_period(update, context):
    query = update.callback_query
    await query.answer()
    period = query.data.replace('period_', '')

    end_date = date.today()
    if period == '1day':
        start_date = end_date - timedelta(days=1)
        time_gap_correct_buttons = ['1 min', '10 min', '1 hour']
    elif period == '1month':
        start_date = end_date - timedelta(days=30)
        time_gap_correct_buttons = ['10 min', '1 hour', '1 day']
    elif period == '1year':
        start_date = end_date - timedelta(days=365)
        time_gap_correct_buttons = ['1 hour', '1 day', '1 week']
    elif period == '5years':
        start_date = end_date - timedelta(days=5*365)
        time_gap_correct_buttons = ['1 day', '1 week', '1 month']

    
    context.user_data['start_end_dates'] = (start_date, end_date)
    context.user_data['period'] = period
    
    await time_gap_menu(update, context, time_gap_correct_buttons)


async def time_gap_menu(update, context, list_of_buttons=None):
    query = update.callback_query
    await query.answer()

    time_gap_buttons = {'1 min': [InlineKeyboardButton('üìÖ 1 –º–∏–Ω—É—Ç–∞', callback_data='time_gap:1min')],
                        '10 min': [InlineKeyboardButton('üìÖ 10 –º–∏–Ω—É—Ç', callback_data='time_gap:10min')],
                        '1 hour': [InlineKeyboardButton('üìÖ 1 —á–∞—Å', callback_data='time_gap:1h')],
                        '1 day': [InlineKeyboardButton('üìÖ 1 –¥–µ–Ω—å', callback_data='time_gap:1d')],
                        '1 week': [InlineKeyboardButton('üìÖ 1 –Ω–µ–¥–µ–ª—è', callback_data='time_gap:1w')],
                        '1 month': [InlineKeyboardButton('üìÖ 1 –º–µ—Å—è—Ü', callback_data='time_gap:1m')]
                        }

    keyboard_time_gap = [time_gap_buttons[time_gap] for time_gap in list_of_buttons] if list_of_buttons else list(time_gap_buttons.values())
    keyboard_time_gap.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='go_back')])

    await query.edit_message_text(
        '‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:',
        reply_markup=InlineKeyboardMarkup(keyboard_time_gap)
    )
    stack = context.user_data.setdefault('history_steps', [])
    if not stack or stack[-1] != 'time_gap_menu':
        stack.append('time_gap_menu')

async def handle_time_gap(update, context):
    query = update.callback_query
    await query.answer()

    time_gap = query.data.replace('time_gap:', '')
    context.user_data['time_gap'] = time_gap

    await ticker_plot(update, context)


async def ticker_plot(update, context):
    query = update.callback_query
    await query.answer()

    ticker = context.user_data.get('ticker', '')
    start_date, end_date = context.user_data.get('start_end_dates', (date.today() - timedelta(days=30), date.today()))
    time_gap = context.user_data.get('time_gap', '1d')

    # data = Ticker(ticker).candles(start = '2025-06-01', end = date.today())
    # price = data.iloc[-1, 0]
    # await message.reply_text(f"–¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è {ticker} ({data.iloc[-1, 7].strftime('%Y-%m-%d')}): {price:.2f} RUB")

    date_delta = (end_date - start_date).days
    if date_delta >= 1:
        message_line = f'{start_date.strftime('%d.%m.%y')} - {end_date.strftime('%d.%m.%y')}'
    else:
        message_line = f'{start_date.strftime('%d.%m.%y')}'

    data = Ticker(ticker).candles(start = start_date, end = end_date, period=time_gap)
    buf = paint_plot(data, ticker, start_date, end_date, time_gap, date_delta)
    
    await query.message.reply_photo(
        photo=buf,
        caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ {ticker} –∑–∞ {message_line} ({date_delta} {plural_day_ru(date_delta)})\n"
                f"üìè –ß–∞—Å—Ç–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {type_gap_to_ru(time_gap)} —Ñ–æ—Ä–º–∞—Ç\n"
                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    buf.close()


def main():
    load_dotenv()
    FINANCE_BOT_TOKEN = os.getenv("FINANCE_BOT_TOKEN")
    
    application = Application.builder().token(FINANCE_BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_back, pattern='^go_back$'))
    application.add_handler(CallbackQueryHandler(manual_input, pattern='^manual_input$'))
    application.add_handler(CallbackQueryHandler(company_list, pattern='^company_list$'))
    application.add_handler(CallbackQueryHandler(handle_ticker, pattern='^ticker_'))
    application.add_handler(CallbackQueryHandler(handle_period, pattern='^period_'))
    application.add_handler(CallbackQueryHandler(handle_time_gap, pattern='^time_gap:'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ticker))
    
    application.run_polling()

if __name__ == "__main__":
    main()

